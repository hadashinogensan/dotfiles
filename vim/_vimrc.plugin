set nocompatible

set runtimepath^=~/.vim/dein/repos/github.com/Shougo/dein.vim

call dein#begin(expand('~/.vim/dein'))

  " dein自身をdeinで管理する
  call dein#add('Shougo/dein.vim')
  " vim上でコマンドを実行できるようにするプラグイン
  call dein#add('Shougo/vimproc.vim', {'build' : 'make'})
  " You can specify revision/branch/tag.
  call dein#add('Shougo/vimshell', { 'rev': '3787e5' })
  " Emmet
  call dein#add('mattn/emmet-vim')
  " 補完
  call dein#add('Shougo/neocomplete.vim')
  " スニペット
  call dein#add('Shougo/neosnippet.vim')
  call dein#add('Shougo/neosnippet-snippets')
  call dein#add('honza/vim-snippets')
  " ファイル検索
  call dein#add('Shougo/unite.vim')
  " Uniteで関数一覧などのアウトラインを表示する
  call dein#add('Shougo/unite-outline')
  " Unite で最近開いたファイルを見れる
  call dein#add('Shougo/neomru.vim')
  " Denite : Unite の後継、Unite も unite-outline などを利用するために必要
  call dein#add('Shougo/denite.nvim')
  " vimでGitを扱う
  call dein#add('tpope/vim-fugitive')
  " Gitの変更を見やすくする
  call dein#add('airblade/vim-gitgutter')
  " テキストを特定の文字で囲んだりする
  call dein#add('tpope/vim-surround')
  " trueとfalseをきりかえたり
  call dein#add('AndrewRadev/switch.vim')
  " 視覚的にreplaceできるやつ
  call dein#add('osyo-manga/vim-over')
  " 画面上の見えている範囲の移動を早くするためのプラグイン
  call dein#add('Lokaltog/vim-easymotion')
  " = の位置とかそろえられるやつ！
  call dein#add('junegunn/vim-easy-align')
  " fの検索機能を強化する
  call dein#add('rhysd/clever-f.vim')
  " ステータスラインをかっこよく
  call dein#add('itchyny/lightline.vim')
  " jsonの表示がおかしいのを治す
  call dein#add('elzr/vim-json')
  " 編集しているファイルをGitHubで開く
  call dein#add('tyru/open-browser.vim')
  call dein#add('tyru/open-browser-github.vim')
  " CSS のカラーコードをプレビューする
  call dein#add('ap/vim-css-color')
  " インデントなどのエディタの設定を読み込む
  call dein#add('editorconfig/editorconfig-vim')
  " シンタックスチェック
  call dein#add('vim-syntastic/syntastic')

  " ==================================================
  " テキストオブジェクト
  " ==================================================
  " テキストオブジェクト系のプラグインが依存しているプラグイン
  call dein#add('kana/vim-textobj-user')
  " [ , ] 引数
  call dein#add("sgur/vim-textobj-parameter")

  " ==================================================
  " シンタックスハイライト
  " ==================================================
  call dein#add('leafgarland/typescript-vim')
  call dein#add('posva/vim-vue')

call dein#end()

filetype plugin on
filetype plugin indent on
filetype indent on

" ==================================================
" Denite
" ==================================================

" Prefix
nnoremap [denite] <nop>
nmap <space>u [denite]

nnoremap <silent> [denite]f :<C-u>Denite file_rec -default-action=tabopen<CR>
nnoremap <silent> [denite]c :<C-u>DeniteBufferDir file -default-action=tabopen<CR>
nnoremap <silent> [denite]o :<C-u>Denite unite:outline -default-action=open<CR>
nnoremap <silent> [denite]m :<C-u>Denite file_mru -default-action=tabopen<CR>
nnoremap <silent> [denite]g :<C-u>Denite grep -default-action=tabopen<CR>
nnoremap <silent> [denite]p :<C-u>DeniteProjectDir file -default-action=tabopen<CR>

" grep で ag を利用するように
call denite#custom#var('file_rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
call denite#custom#var('grep', 'command', ['ag'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'default_opts', ['--follow', '--no-group', '--no-color'])

call denite#custom#map('insert', '<Down>', '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('insert', '<Up>', '<denite:move_to_previous_line>', 'noremap')
call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>', 'noremap')

call denite#custom#source('file,file_rec,file_mru', 'matchers', [ 'matcher/regexp' ])

call denite#custom#option('default', {
\   'prompt': '>',
\ })

" 検索から除外するパターン
call denite#custom#filter('matcher/ignore_globs', 'ignore_globs', [
\   '*~',
\   '*.o',
\   '*.exe',
\   '*.bak',
\   '.DS_Store',
\   '*.pyc',
\   '*.sw[po]',
\   '*.class',
\   '.hg/',
\   '.git/',
\   '.bzr/',
\   '.svn/',
\   'tags',
\   'tags-*',
\   '.gif',
\   '.jpg',
\   '.jpeg',
\   '.png',
\   '.webp',
\   '.woff',
\   '.svg',
\   '.psd',
\   '.ico',
\   '.keep',
\   'node_modules/',
\   '__pycache__/',
\ ])

" ==================================================
" neocomplete
" ==================================================

" neocomplcacheを自動起動する
let g:neocomplete#enable_at_startup = 1
" 大文字が入力されるまで大文字小文字を区別しない
let g:neocomplete#enable_smart_case = 1
" シンタックスをキャッシュする際の最小文字長
let g:neocomplete#sources#syntax#min_keyword_length = 3
" バッファ名のパターンを指定する
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
" ポップアップで表示される候補の数
let g:neocomplete#max_list = 20
" キャッシュしないファイル名
let g:neocomplete#sources#buffer#disabled_pattern = '\.log\|\.log\.\|\.jax'
" 自動補完を行わないバッファ名
let g:neocomplete#lock_buffer_name_pattern = '\.log\|\.log\.\|.*quickrun.*\|.jax'

" rubyのオムニ補完
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'

" 補完をキャンセルし元に戻す
inoremap <expr><C-g> neocomplete#undo_completion()

" 補完候補の共通部分のみを補完する
inoremap <expr><C-l> neocomplete#complete_common_string()

" Enterで候補を選択し、改行もされないようにする
function! s:my_crinsert()
    return pumvisible() ? neocomplete#close_popup() : "\<Cr>"
endfunction
inoremap <silent> <CR> <C-R>=<SID>my_crinsert()<CR>

" <C-h>, <BS>補完を禁止
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

" ==================================================
" neosnippet
" ==================================================
let g:neosnippet#snippets_directory='~/.vim/dein/repos/github.com/honza/vim-snippets/snippets,~/dotfiles/vim/snippets'

inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"

" Plugin key-mappings.
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" ==================================================
" vim-fugitive
" ==================================================

nnoremap [git] <Nop>
vnoremap [git] <Nop>
nmap <Space>g [git]
vmap <Space>g [git]

nnoremap <silent> [git]df :Gdiff<CR>
nnoremap <silent> [git]ad :Gwrite<CR>
nnoremap <silent> [git]cv :Gcommit -v<CR>
nnoremap <silent> [git]cam :Gcommit --amend<CR>
nnoremap <silent> [git]bl :Gblame<CR>
nnoremap <silent> [git]st :Gstatus<CR>

" ==================================================
" open-browser-github
" ==================================================

nnoremap <silent> [git]g :OpenGithubFile<CR>
vnoremap <silent> [git]g :OpenGithubFile<CR>

" https://github.com/tyru/open-browser-github.vim/issues/12
let g:openbrowser_github_url_exists_check = 'ignore'

" ==================================================
" switch.vim
" ==================================================

" Prefix
nnoremap [switch] <Nop>
nmap <Space>t [switch]

inoremap [switch] :Switch<CR>
nnoremap [switch] :Switch<CR>
vnoremap [switch] :Switch<CR>

augroup SwitchConfig
  autocmd!
  autocmd FileType *  let b:switch_custom_definitions = [
    \   ['true', 'false'],
    \ ]

  " Ruby
  autocmd FileType ruby,eruby,haml let b:switch_custom_definitions = [
    \   ['if', 'unless'],
    \   ['.blank?', '.present?'],
    \   ['include', 'extend'],
    \   ['class', 'module'],
    \   ['attr_accessor', 'attr_reader', 'attr_writer'],
    \ ]

  " Perl
  autocmd FileType perl let b:switch_custom_definitions = [
    \   ['if', 'unless'],
    \   ['eq', 'ne'],
    \ ]

  " TypeScript
  autocmd FileType perl let b:switch_custom_definitions = [
    \   ['toBeTruthly', 'toBeFalsy'],
    \ ]
augroup END


" ==================================================
" vim-over
" ==================================================

nnoremap [over] <Nop>
nmap <Space>s [over]
vmap <Space>s [over]

nnoremap <silent> [over]s :OverCommandLine<CR>s/
vnoremap <silent> [over]s :OverCommandLine<CR>s/
nnoremap <silent> [over]% :OverCommandLine<CR>%s/

" ==================================================
" vim-easymotion
" ==================================================

"Disable default mappings
let g:EasyMotion_do_mapping = 0
" 大文字小文字を区別しない
let g:EasyMotion_smartcase = 1

nmap <Space>e <Plug>(easymotion-s2)

" ==================================================
" vim-easy-align
" ==================================================

xmap <Space>e <Plug>(EasyAlign)

" ==================================================
" vim-lightline
" ==================================================
set laststatus=2
set t_Co=256

let g:lightline = {
  \   'mode_map': {'c': 'NORMAL'},
  \   'active': {
  \     'left':  [ [ 'mode' ], [ 'relativepath' ] ],
  \     'right': [
  \        [ 'syntastic', 'fileformat', 'fileencoding', 'filetype', 'fugitive' ]
  \      ]
  \   },
  \   'component_function': {
  \     'modified':   'LightLineModified',
  \     'fugitive':   'LightLineFugitive',
  \     'filename':   'LightLineFilename',
  \     'fileformat': 'LightLineFileformat',
  \     'filetype':   'LightLineFiletype',
  \     'mode':       'LightLineMode',
  \   },
  \   'component_expand': {
  \     'syntastic': 'SyntasticStatuslineFlag'
  \   },
  \   'component_type': {
  \     'syntastic': 'error'
  \   }
  \ }

function! LightLineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineFilename()
  return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '<U+1F512> ' : ''
endfunction

function! LightLineFugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      return fugitive#head()
    endif
  catch
  endtry
  return ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

" ==================================================
" Emmet
" ==================================================
let g:user_emmet_expandabbr_key='<c-y>'

" ==================================================
" vim-json
" ==================================================
let g:vim_json_syntax_conceal = 0

" ==================================================
" clever-f.vim
" ==================================================
" 大文字を入力した時だけ大文字小文字を区別するように
let g:clever_f_smart_case = 1
" 現在行のみを検索対象に
let g:clever_f_across_no_line = 1
" fとFの移動方向を固定する
let g:clever_f_fix_key_direction = 1

" ==================================================
" Syntastic
" ==================================================
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

let g:syntastic_python_checkers = ["flake8"]
let g:syntastic_mode_map = {
    \ 'mode': 'passive',
    \ 'active_filetypes': ['python']
    \}

augroup AutoSyntastic
  autocmd!
  autocmd BufWritePost * call s:syntastic()
augroup END
 function! s:syntastic()
  SyntasticCheck
  call lightline#update()
endfunction
